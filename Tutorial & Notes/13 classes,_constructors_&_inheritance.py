# -*- coding: utf-8 -*-
"""Classes, Constructors & Inheritance.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m3LoaAegkUA8beurLyn75F_yxuDjfG_L
"""

#Classes

class Point:
  def move(self):
    print("move")

  def draw(self):
    print("draw")

  def test():
    print("test")

p = Point
p.x = 10
p.y = 20
print(p.x)
p.move(Point)
p.test()

#variables can be stored under classes and functions can be called via functions

#Capitalise do not use underscores

#Constructors (Line 4 __init__)

#think of constructors as a private varaible for the class. you have to call "self" in a function defined under a class to access those objects defined inside the class. 
#example below, in the print function, you have to call self in order to access "variable".
#however, if you do not need to access any variables defined in the class, you do not need to put self as a parameter 

class xy: 
  variable = "variable"
  def __init__(self, x, y):
    self.x = x 
    self.y = y

  def print(self, x):
    self.variable
    print(x)
    
xy.print(xy, "hi")

Xy = xy("10", "20") # MUST PUT AN EQUALS SIGN
#^^ you are defining self.x and self.y in class xy

print(Xy.x) #Call Xy in the next for the variable
Xy.x = 20 #editing the variable X under object/class xy
print(f"New: {Xy.x}")
  #init is short for initialise

#Inheritance

class X1:
  def function(self):
    print("Function Executed")

'''
instead of repeating in another class

class X2:
  def function(self):
    print("Function Executed")

'''

class X2(X1):
  pass

  X1.function(X1)
  def function2(self):
    print("Function 2 Executed")

#Now you can call two defined functions under class X2 without repeating those in X1

#Mini Exercise

class Person:
  def __init__(self, name):
    self.name = name

  def talk(self, speech):
    print(speech)
    print(f"By: {self.name}")

n = input("What is your name? ")
person = Person(n)
s = input(f'Hi {person.name}, what would you like to say? ')
Person.talk(person ,f'{person.name} says: {s}')